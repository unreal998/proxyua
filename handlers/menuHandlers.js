import { adminMenu, createBackMenu, userMenu } from "../UI/menus.js";
import { settingsMenu } from "../UI/settings.js";
import { menuDictionary, proxyListMenu } from '../UI/dictionary.js';
import {addNewProxyConfig, getProxyList } from "../database/api.js";
import { generateProxyListMenu } from "../UI/proxyList.js";

export default function menuHandlers(cbData, bot, message, userData, responceMessageAwaiting) {
  responceMessageAwaiting.type = 'menu';
  responceMessageAwaiting.lastRequestMessage = cbData.button;
    if (cbData.button === "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è") {
        if (userData.type === 'admin') {
          bot.sendMessage(message.chat.id, settingsMenu.text, settingsMenu);
        } else {
          bot.sgetProxyListendMessage(
            message.chat.id,
            createBackMenu("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è").text,
            createBackMenu("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
          );
        }
      } else if (cbData.button === "–ù–∞–∑–∞–¥") {
        if (userData.type === "admin") {
            bot.sendMessage(message.chat.id, menuDictionary.MAIN_MENU, adminMenu);
        } else {
            bot.sendMessage(message.chat.id, menuDictionary.MAIN_MENU, userMenu);
        }
      } else if (cbData.button === menuDictionary.PROXY_LIST) {
        getProxyList().then(data => {
          const list = [];
          for (const key in data) {
            const element = data[key];
            const listObject = {
              text: `${element.address} - ${element.status ? 'üü¢' : 'üî¥'}`,
              callback_data: JSON.stringify({
                type: 'proxyMenu',
                id: key,
                button: element.address,
              })
            }
            const editButton = {
              text: `Edit`,
              callback_data: JSON.stringify({
                type: 'proxyMenu',
                id: key,
                button: proxyListMenu.EDIT,
              })
            }
            const removeButton = {
              text: `Remove`,
              callback_data: JSON.stringify({
                type: 'proxyMenu',
                id: key,
                button: proxyListMenu.REMOVE,
              })
            }
            list.push([listObject]);
            list.push([editButton, removeButton]);
          }
          bot.sendMessage(message.chat.id, '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å—ñ', generateProxyListMenu(list));
        })
      } else if (cbData.button === "–í—ñ–¥–∫—Ä–∏—Ç—ñ –∑–∞—è–≤–∫–∏") {
        bot.sendMessage(
          message.chat.id,
          createBackMenu("–í—ñ–¥–∫—Ä–∏—Ç—ñ –∑–∞—è–≤–∫–∏").text,
          createBackMenu("–í—ñ–¥–∫—Ä–∏—Ç—ñ –∑–∞—è–≤–∫–∏")
        );
      } else if (cbData.button === menuDictionary.ADD_PROXY) {
        bot.sendMessage(
          message.chat.id,
          '–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—Ä–æ–∫—Å—ñ',
          createBackMenu(menuDictionary.ADD_PROXY)
        );
      } else if (cbData.button === "–ê—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ") {
        bot.sendMessage(
          message.chat.id,
          createBackMenu("–ê—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ").text,
          createBackMenu("–ê—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ")
        );
      } else if (cbData.button === "–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å") {
        bot.sendMessage(
          message.chat.id,
          createBackMenu("–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å").text,
          createBackMenu("–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å")
        );
      } else if (cbData.button === "–ú–æ—ó –ø—Ä–æ–∫—Å—ñ") {
        bot.sendMessage(
          message.chat.id,
          createBackMenu("–ú–æ—ó –ø—Ä–æ–∫—Å—ñ").text,
          createBackMenu("–ú–æ—ó –ø—Ä–æ–∫—Å—ñ")
        );
      } else if (cbData.button === "–ú–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó") {
        bot.sendMessage(
          message.chat.id,
          createBackMenu("–ú–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó").text,
          createBackMenu("–ú–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó")
        );
      } else {
        bot.sendMessage(message.chat.id, `–í–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: ${cbData.button}`);
      }
}

export function menuResponceHandlers(responceMessageAwaiting, bot, message) {
  switch (responceMessageAwaiting.lastRequestMessage) {
    case menuDictionary.ADD_PROXY:
      addNewProxyConfig(message).then((data) => {
        bot.sendMessage(message.chat.id, '–î–∞–Ω—ñ –ø—Ä–æ–∫—Å—ñ –¥–æ–¥–∞–Ω–æ');
      });
      break;
    default:
      bot.sendMessage(message.chat.id, 'unknown text responce');
  }

}