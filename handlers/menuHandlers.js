import { adminMenu, createBackToMenuMenu, userMenu } from "../UI/menus.js";
import { adminSettingsMenu } from "../UI/settings.js";
import {
  menuDictionary,
  proxyListMenu,
  transactionListMenu,
  userMenuDictionary,
} from "../UI/dictionary.js";
import { addNewProxyConfig, getProxyList, getActiveTransactionList } from "../database/api.js";
import { generateProxyListMenu } from "../UI/proxyList.js";
import { generateTransactionListMenu } from "../UI/transactionList.js";
import { selectedProxyByUser } from "../data/selectedProxyByUser.js";

export default function menuHandlers(
  cbData,
  bot,
  message,
  userData,
  responceMessageAwaiting
) {
  responceMessageAwaiting.type = "menu";
  responceMessageAwaiting.lastRequestMessage = cbData.btn;

  if (cbData.btn === menuDictionary.MAIN_MENU) {
    if (userData.type === "admin") {
      bot.sendMessage(message.chat.id, menuDictionary.MAIN_MENU, adminMenu);
    } else {
      bot.sendMessage(message.chat.id, menuDictionary.MAIN_MENU, userMenu);
    }
  } else if (cbData.btn === menuDictionary.PROXY_LIST) {
    getProxyList().then((data) => {
      const list = [];
      for (const key in data) {
        const element = data[key];
        const listObject = {
          text: `${element.address} - ${element.status ? "üü¢" : "üî¥"}`,
          callback_data: JSON.stringify({
            type: "proxyMenu",
            id: key,
            btn: proxyListMenu.INFO,
          }),
        };
        const editButton = {
          text: proxyListMenu.EDIT,
          callback_data: JSON.stringify({
            type: "proxyMenu",
            id: key,
            btn: proxyListMenu.EDIT,
          }),
        };
        const removeButton = {
          text: proxyListMenu.REMOVE,
          callback_data: JSON.stringify({
            type: "proxyMenu",
            id: key,
            btn: proxyListMenu.REMOVE,
          }),
        };
        list.push([listObject]);
        list.push([editButton, removeButton]);
      }
      bot.sendMessage(
        message.chat.id,
        "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å—ñ",
        generateProxyListMenu(list)
      );
    });
  } else if (cbData.btn === menuDictionary.PENDING_TRANSACTIONS) {
    getActiveTransactionList().then((data) => {
      const list = [];
      data.forEach(element => {
        const listObject = {
          text: `${element.proxyAddress} - ${new Date(element.rentTime).getHours() > 24 ? 
            new Date(element.rentTime).getDay() + '–¥–Ω—ñ–≤' : new Date(element.rentTime).getHours() + '–≥–æ–¥–∏–Ω'}`,
          callback_data: JSON.stringify({
            type: "tMenu",
            id: element.id,
            btn: transactionListMenu.INFO,
          }),
        };
        list.push([listObject]);
      });

      bot.sendMessage(message.chat.id, menuDictionary.PENDING_TRANSACTIONS, generateTransactionListMenu(list));
    })
  } else if (cbData.btn === menuDictionary.ADD_PROXY) {
    bot.sendMessage(
      message.chat.id,
      "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—Ä–æ–∫—Å—ñ",
      createBackToMenuMenu()
    );
  } else if (cbData.btn === userMenuDictionary.RENT) {
    getProxyList().then((data) => {
      const availableProxies = [];
      for (const key in data) {
        if (data[key].status) {
          availableProxies.push({
            text: data[key].address,
            callback_data: JSON.stringify({
              type: "proxyRent",
              id: key,
              btn: data[key].address,
            }).slice(0, 64),
          });
        }
      }
      const proxyButtons = availableProxies.map((proxy) => [proxy]);
      bot.sendMessage(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–∫—Å—ñ", {
        reply_markup: {
          inline_keyboard: [
            ...proxyButtons,
            [
              {
                text: `üîô ${menuDictionary.MAIN_MENU}`,
                callback_data: JSON.stringify({
                  type: "menu",
                  btn: menuDictionary.MAIN_MENU,
                }).slice(0, 64),
              },
            ],
          ],
        },
      });
    });
  } else if (cbData.btn === "–ú–æ—ó –ø—Ä–æ–∫—Å—ñ") {
    bot.sendMessage(message.chat.id, "–ú–æ—ó –ø—Ä–æ–∫—Å—ñ", createBackToMenuMenu());
  } else if (cbData.btn === "–Ü—Å—Ç–æ—Ä—ñ—è") {
    bot.sendMessage(message.chat.id, "–Ü—Å—Ç–æ—Ä—ñ—è", createBackToMenuMenu());
  } else if (cbData.btn === menuDictionary.SETTINGS) {
    if (userData.type === "admin") {
      bot.sendMessage(message.chat.id, menuDictionary.SETTINGS, adminSettingsMenu);
    } else {
      bot.sendMessage(message.chat.id, menuDictionary.MAIN_MENU, userMenu);
    }
  } else if (cbData.type === "proxyRent") {
    responceMessageAwaiting.selectedProxy = cbData.btn;
    bot.sendMessage(
      message.chat.id,
      "–ù–∞ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ?",
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "30 —Ö–≤. - 0.5 usd",
                callback_data: JSON.stringify({
                  type: "rentTime",
                  time: "30 —Ö–≤–∏–ª–∏–Ω",
                  price: 0.5,
                }),
              },
              {
                text: "1 –≥–æ–¥. - 1 usd",
                callback_data: JSON.stringify({
                  type: "rentTime",
                  time: "1 –≥–æ–¥–∏–Ω—É",
                  price: 1,
                }),
              },
            ],
            [
              {
                text: "12 –≥–æ–¥. - 7 usd",
                callback_data: JSON.stringify({
                  type: "rentTime",
                  time: "12 –≥–æ–¥–∏–Ω",
                  price: 7,
                }),
              },
              {
                text: "24 –≥–æ–¥. - 24 usd",
                callback_data: JSON.stringify({
                  type: "rentTime",
                  time: "24 –≥–æ–¥–∏–Ω–∏",
                  price: 24,
                }),
              },
            ],
            [
              {
                text: "3 –¥–Ω—ñ - 50 usd",
                callback_data: JSON.stringify({
                  type: "rentTime",
                  time: "3 –¥–Ω—ñ",
                  price: 50,
                }),
              },
              {
                text: "7 –¥–Ω—ñ–≤ - 100 usd",
                callback_data: JSON.stringify({
                  type: "rentTime",
                  time: "7 –¥–Ω—ñ–≤",
                  price: 100,
                }),
              },
            ],
            [
              {
                text: "30 –¥–Ω—ñ–≤ - 300 usd",
                callback_data: JSON.stringify({
                  type: "rentTime",
                  time: "30 –¥–Ω—ñ–≤",
                  price: 300,
                }),
              },
            ],
          ],
        },
      }
    );
  } else if (cbData.type === "rentTime") {
    const selectedProxy = responceMessageAwaiting.selectedProxy;
    const rentTime = cbData.time;
    const rentPrice = cbData.price;

    selectedProxyByUser.proxyAddress = selectedProxy;
    selectedProxyByUser.rentTime = rentTime;
    selectedProxyByUser.price = rentPrice;
    selectedProxyByUser.timeStampInMilliseconds = Date.now();

    bot.sendMessage(
      message.chat.id,
      `–í–∏ —Ö–æ—á–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ ${selectedProxy} –Ω–∞ ${rentTime} –∑–∞ ${rentPrice} usd?`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–¢–∞–∫",
                callback_data: JSON.stringify({
                  type: "confirmRentYes",
                  proxyId: selectedProxy.id,
                  time: rentTime,
                  price: rentPrice,
                }),
              },
              {
                text: "–ù—ñ",
                callback_data: JSON.stringify({
                  type: "menu",
                  btn: menuDictionary.MAIN_MENU,
                }),
              },
            ],
          ],
        },
      }
    );
  } else if (cbData.type === "confirmRentYes") {
    responceMessageAwaiting.selectedProxy = cbData.btn;
    bot.sendMessage(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ë—ñ–Ω–∞–Ω—Å",
              callback_data: JSON.stringify({
                type: "binance",
              }),
            },
            {
              text: "–ú–æ–Ω–æ–±–∞–Ω–∫",
              callback_data: JSON.stringify({
                type: "monobank",
              }),
            },
          ],
        ],
      },
    });
  } else if (cbData.type === "binance") {
    responceMessageAwaiting.selectedProxy = cbData.btn;
    bot.sendMessage(
      message.chat.id,
      `–î–ª—è –æ–ø–ª–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ ${selectedProxyByUser.proxyAddress} –Ω–∞ ${selectedProxyByUser.rentTime} –≤–∞–º —Å–ª—ñ–¥ —Å–ø–ª–∞—Ç–∏—Ç–∏ ${selectedProxyByUser.price} \n–†–µ–∫–≤—ñ–∑–∏—Ç–∏ —Ä–∞—Ö—É–Ω–∫—É –ë—ñ–Ω–∞–Ω—Å: \n `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–°–ø–ª–∞—Ç–∏–≤",
                callback_data: JSON.stringify({
                  type: "paid",
                }),
              },
            ],
          ],
        },
      }
    );
  } else if (cbData.type === "monobank") {
    responceMessageAwaiting.selectedProxy = cbData.btn;
    bot.sendMessage(
      message.chat.id,
      `–î–ª—è –æ–ø–ª–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ ${selectedProxyByUser.proxyAddress} –Ω–∞ ${selectedProxyByUser.rentTime} –≤–∞–º —Å–ª—ñ–¥ —Å–ø–ª–∞—Ç–∏—Ç–∏ ${selectedProxyByUser.price} usd \n–†–µ–∫–≤—ñ–∑–∏—Ç–∏ —Ä–∞—Ö—É–Ω–∫—É –º–æ–Ω–æ–±–∞–Ω–∫: \n `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–°–ø–ª–∞—Ç–∏–≤",
                callback_data: JSON.stringify({
                  type: "paid",
                }),
              },
            ],
          ],
        },
      }
    );
  } else if (cbData.type === "paid") {
    responceMessageAwaiting.selectedProxy = cbData.btn;
    bot.sendMessage(message.chat.id, `–ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω –ø—Ä–æ–ø–ª–∞—Ç–∏`);
  } else {
    bot.sendMessage(message.chat.id, `–í–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: ${cbData.btn}`);
  }
}

export function menuResponceHandlers(responceMessageAwaiting, bot, message) {
  switch (responceMessageAwaiting.lastRequestMessage) {
    case menuDictionary.ADD_PROXY:
      addNewProxyConfig(message).then((data) => {
        bot.sendMessage(
          message.chat.id,
          "–î–∞–Ω—ñ –ø—Ä–æ–∫—Å—ñ –¥–æ–¥–∞–Ω–æ",
          createBackToMenuMenu()
        );
      });
      break;
    default:
      bot.sendMessage(message.chat.id, "unknown text responce");
  }
}
