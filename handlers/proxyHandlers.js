import { proxyListMenu } from "../UI/dictionary.js";
import { createBackToMenuMenu } from "../UI/menus.js";
import { generateEditProxyMenu } from "../UI/proxyList.js";
import { getProxyData, updateProxyData } from "../database/api.js";

export default function proxyMenuHandlers(
  cbData,
  bot,
  message,
  userData,
  responceMessageAwaiting
) {
  if (userData.type === "admin") {
    responceMessageAwaiting.type = cbData.type;
    responceMessageAwaiting.lastRequestMessage = cbData.btn;
    responceMessageAwaiting.id = cbData.id;
    switch (cbData.btn) {
      case proxyListMenu.EDIT:
        bot.sendMessage(
          message.chat.id,
          `–©–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏?`,
          generateEditProxyMenu(cbData.id)
        );
        break;
      case proxyListMenu.REMOVE:
        bot.sendMessage(
          message.chat.id,
          `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ–∫—Å—ñ?`
        );
        break;
      case proxyListMenu.INFO:
        getProxyData(cbData.id).then((data) => {
          bot.sendMessage(
            message.chat.id,
            `
                        –ê–¥—Ä–µ—Å–∞: ${data.address} \n
–õ–æ–≥—ñ–Ω: ${data.login} \n
–ü–∞—Ä–æ–ª—å: ${data.password} \n
–°—Ç–∞—Ç—É—Å: ${data.status ? " üü¢" : " üî¥"}\n
${data.status ? '' : `–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ: ${data.rentedBy} \n
–ö—ñ–Ω–µ—Ü—å –∞—Ä–µ–Ω–¥–∏ ${new Date(data.rentEnd).toLocaleString()}`}`, createBackToMenuMenu());
                })
                break;
            case proxyListMenu.EDIT_LOGIN:
                bot.sendMessage(message.chat.id, `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ª–æ–≥—ñ–Ω`);
                break;
            case proxyListMenu.EDIT_PASSWORD:
                bot.sendMessage(message.chat.id, `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å`);
                break;
            case proxyListMenu.EDIT_ADDRESS:
                bot.sendMessage(message.chat.id, `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É`);
                break;
            default:
                bot.sendMessage(message.chat.id, `–í–∏ –Ω–∞–∂–∞–ª–∏ proxy –∫–Ω–æ–ø–∫—É: ${cbData.btn}`);
        }
    } else {
        bot.sendMessage(message.chat.id, `–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É`);
    }
}

export function proxyMenuResponceHandlers(
  responceMessageAwaiting,
  bot,
  message
) {
  switch (responceMessageAwaiting.lastRequestMessage) {
    case proxyListMenu.EDIT_LOGIN:
      getProxyData(responceMessageAwaiting.id).then((data) => {
        const updateLoginData = {
          ...data,
          login: message.text,
        };
        updateProxyData(updateLoginData, responceMessageAwaiting.id).then(
          (updData) => {
            bot.sendMessage(
              message.chat.id,
              `–õ–æ–≥—ñ–Ω –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${updData.login}`,
              createBackToMenuMenu()
            );
          }
        );
      });
      break;
    case proxyListMenu.EDIT_PASSWORD:
      getProxyData(cbData.id).then((data) => {
        const updateLoginData = {
          ...data,
          password: message.text,
        };
        updateProxyData(updateLoginData).then((updData) => {
          bot.sendMessage(
            message.chat.id,
            `–ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${updData.password}`,
            createBackToMenuMenu()
          );
        });
      });
      break;
    case proxyListMenu.EDIT_ADDRESS:
      getProxyData(cbData.id).then((data) => {
        const updateLoginData = {
          ...data,
          address: message.text,
        };
        updateProxyData(updateLoginData).then((updData) => {
          bot.sendMessage(
            message.chat.id,
            `–ê–¥—Ä–µ—Å—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${updData.address}`,
            createBackToMenuMenu()
          );
        });
      });
      break;
    default:
      bot.sendMessage(message.chat.id, "unknown proxy text responce");
  }
}
